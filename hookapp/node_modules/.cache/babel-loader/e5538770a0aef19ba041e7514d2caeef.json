{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { setSelectionRange } from \"@testing-library/user-event/dist/utils\";\nimport { useEffect, useState } from \"react\"; //pido por parametro la url que voy a usar\n\nexport const useFetch = url => {\n  _s();\n\n  const [state, setState] = useState({\n    data: null,\n    isLoading: true,\n    error: null\n  }); //funcion para hacer la consuta a la API\n\n  const getFetch = async () => {\n    setState({ ...state,\n      isLoading: true\n    });\n    const resp = await fetch(url);\n    const data = await resp.json();\n    setState({\n      data,\n      isLoading: false,\n      error: null\n    });\n  }; //no puedo usar async en un useEffect porque eso implica que sea una promesa y \n  //useEffect esta esperando funciones puras, por lo que genera error\n\n\n  useEffect(() => {\n    //llamo la funcion que ejecutara el useEffect\n    getFetch(); //como dependencia paso la url, de forma que se renderice cada vez que la url cambie\n  }, [url]);\n  return {\n    data: state.data,\n    isLoading: state.isLoading,\n    error: state.error\n  };\n};\n\n_s(useFetch, \"j7LPdXlCFTAdcSxzBeRc2o5KGVc=\");","map":{"version":3,"names":["setSelectionRange","useEffect","useState","useFetch","url","state","setState","data","isLoading","error","getFetch","resp","fetch","json"],"sources":["/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/hooks/useFetch.js"],"sourcesContent":["import { setSelectionRange } from \"@testing-library/user-event/dist/utils\";\nimport { useEffect, useState } from \"react\";\n\n//pido por parametro la url que voy a usar\nexport const useFetch = (url) => {\n\n    const [state, setState] = useState({\n        data : null,\n        isLoading: true,\n        error : null\n    })\n    \n\n    //funcion para hacer la consuta a la API\n    const getFetch = async()=>{\n\n        setState({\n            ...state,\n            isLoading: true,\n        })\n\n        const resp = await fetch(url);\n        const data = await resp.json();\n\n        setState({\n            data,\n            isLoading: false,\n            error: null,\n        })\n\n    }\n\n//no puedo usar async en un useEffect porque eso implica que sea una promesa y \n//useEffect esta esperando funciones puras, por lo que genera error\n    useEffect(() => {\n        //llamo la funcion que ejecutara el useEffect\n        getFetch();\n        //como dependencia paso la url, de forma que se renderice cada vez que la url cambie\n    }, [url])\n    \n\n  return{\n    data: state.data,\n    isLoading: state.isLoading,\n    error: state.error,\n\n  }\n}\n"],"mappings":";;AAAA,SAASA,iBAAT,QAAkC,wCAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;EAAA;;EAE7B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;IAC/BK,IAAI,EAAG,IADwB;IAE/BC,SAAS,EAAE,IAFoB;IAG/BC,KAAK,EAAG;EAHuB,CAAD,CAAlC,CAF6B,CAS7B;;EACA,MAAMC,QAAQ,GAAG,YAAS;IAEtBJ,QAAQ,CAAC,EACL,GAAGD,KADE;MAELG,SAAS,EAAE;IAFN,CAAD,CAAR;IAKA,MAAMG,IAAI,GAAG,MAAMC,KAAK,CAACR,GAAD,CAAxB;IACA,MAAMG,IAAI,GAAG,MAAMI,IAAI,CAACE,IAAL,EAAnB;IAEAP,QAAQ,CAAC;MACLC,IADK;MAELC,SAAS,EAAE,KAFN;MAGLC,KAAK,EAAE;IAHF,CAAD,CAAR;EAMH,CAhBD,CAV6B,CA4BjC;EACA;;;EACIR,SAAS,CAAC,MAAM;IACZ;IACAS,QAAQ,GAFI,CAGZ;EACH,CAJQ,EAIN,CAACN,GAAD,CAJM,CAAT;EAOF,OAAM;IACJG,IAAI,EAAEF,KAAK,CAACE,IADR;IAEJC,SAAS,EAAEH,KAAK,CAACG,SAFb;IAGJC,KAAK,EAAEJ,KAAK,CAACI;EAHT,CAAN;AAMD,CA3CM;;GAAMN,Q"},"metadata":{},"sourceType":"module"}