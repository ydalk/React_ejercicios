{"ast":null,"code":"var _jsxFileName = \"/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/02useEffect/Message.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Message = () => {\n  _s();\n\n  const [coords, setCoords] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    //creo  una función a parte para que es la que se ejecutará cuando se monte el componente \n    //debe ser a parte para que sea el mismo espacio en memoria al montar y desmontar el componenete\n    const onMouseMove = _ref => {\n      let {\n        x,\n        y\n      } = _ref;\n      // capturo las cordenadas del mouse desde el evento(event.x, event.y) y desestructuro\n      setCoords({\n        x,\n        y\n      });\n    }; //se crea el listener y llamo a la función \n\n\n    window.addEventListener('mousemove', onMouseMove); //se desmonta el componente y la función \n\n    return () => {//window.removeEventListener('mousemove', onMouseMove)\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Usuario ya existe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), JSON.stringify(coords)]\n  }, void 0, true);\n};\n\n_s(Message, \"u88jFlAnqwJQYxJMF87SvuHHLQE=\");\n\n_c = Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["useEffect","useState","Message","coords","setCoords","x","y","onMouseMove","window","addEventListener","JSON","stringify"],"sources":["/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/02useEffect/Message.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n\nexport const Message = () => {\n\n  const [ coords, setCoords] = useState({x:0, y:0});\n\n  useEffect(() => {\n\n    //creo  una función a parte para que es la que se ejecutará cuando se monte el componente \n    //debe ser a parte para que sea el mismo espacio en memoria al montar y desmontar el componenete\n    const onMouseMove = ({x, y})=>{\n      // capturo las cordenadas del mouse desde el evento(event.x, event.y) y desestructuro\n      setCoords({x, y});\n    }\n\n    //se crea el listener y llamo a la función \n    window.addEventListener('mousemove', onMouseMove)\n  \n    //se desmonta el componente y la función \n    return () => {\n    //window.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [])\n  \n\n  return (\n    <>\n        <h3>Usuario ya existe</h3>\n        {JSON.stringify(coords)}\n\n    </>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAE3B,MAAM,CAAEC,MAAF,EAAUC,SAAV,IAAuBH,QAAQ,CAAC;IAACI,CAAC,EAAC,CAAH;IAAMC,CAAC,EAAC;EAAR,CAAD,CAArC;EAEAN,SAAS,CAAC,MAAM;IAEd;IACA;IACA,MAAMO,WAAW,GAAG,QAAU;MAAA,IAAT;QAACF,CAAD;QAAIC;MAAJ,CAAS;MAC5B;MACAF,SAAS,CAAC;QAACC,CAAD;QAAIC;MAAJ,CAAD,CAAT;IACD,CAHD,CAJc,CASd;;;IACAE,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCF,WAArC,EAVc,CAYd;;IACA,OAAO,MAAM,CACb;IACC,CAFD;EAGD,CAhBQ,EAgBN,EAhBM,CAAT;EAmBA,oBACE;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAEKG,IAAI,CAACC,SAAL,CAAeR,MAAf,CAFL;EAAA,gBADF;AAOD,CA9BM;;GAAMD,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}