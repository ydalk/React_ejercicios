{"ast":null,"code":"var _jsxFileName = \"/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/02useEffect/FormCustomHook.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Message } from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FormCustomHook = () => {\n  _s();\n\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: ''\n  });\n  const {\n    username,\n    email,\n    password\n  } = formState;\n\n  const onInputChange = _ref => {\n    let {\n      target\n    } = _ref;\n    const {\n      name,\n      value\n    } = target;\n    setFormState({ ...formState,\n      // propiedades computadas de los objetos se colocan en llaves [] asignando el valor que va a tomar\n      [name]: value\n    });\n  }; // // el primer argumento que recibe un callback que determina la función que se va a ejecutar cada vez que se llame\n  // // el segundo es un arreglo de dependencias, es la condición por la que se debe disparar\n  // // si esta vacio, se disparará una sola vez al montarse\n  // useEffect( () =>{\n  //     console.log('formState cambió');\n  // }, []);\n  // // se recomienda hacer un useEffect por cada acción que se quiera llamar\n  // // si colocamos un argumento en el arreglo de dependencias se disparará el useEffect cada vez que esta propiedad cambie\n  // useEffect( () =>{\n  //     console.log('formState cambió');\n  // }, [formState]);\n  // useEffect( () =>{\n  //     console.log('email cambió');\n  // }, [email]);\n  //useEffect con snippet\n  //tiene el callback con el cuerpo y en el retorno se maneja la limpiaza en caso de tener un observable o un listener\n  // useEffect(() => {\n  //     //acá se puede crear el observable o listener\n  //   first\n  //   //acá lo limpiamos para evitar que siga consumiendo memoria\n  //   return () => {\n  //     second\n  //   }\n  //   //arreglo de dependencias\n  // }, [third])\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Formulario con Custom Hook \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control mt-2\",\n      placeholder: \"Username\",\n      name: \"username\",\n      value: username,\n      onChange: onInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      className: \"form-control mt-2\",\n      placeholder: \"carolina@mail.com\",\n      name: \"email\",\n      value: email,\n      onChange: onInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      className: \"form-control mt-2\",\n      placeholder: \"password\",\n      name: \"password\",\n      value: password,\n      onChange: onInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FormCustomHook, \"y5CA4HR/HF1j9++hoCYaDKSRjMs=\");\n\n_c = FormCustomHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCustomHook\");","map":{"version":3,"names":["React","useEffect","useState","Message","FormCustomHook","formState","setFormState","username","email","password","onInputChange","target","name","value"],"sources":["/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/02useEffect/FormCustomHook.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Message } from './Message';\n\nexport const FormCustomHook = () => {\n\n    const [formState, setFormState] = useState({\n        username: '',\n        email: '',\n        password: ''\n    });\n\n    const {username, email, password} = formState; \n\n\n    const onInputChange = ({target}) =>{\n        const {name, value} = target;\n        setFormState({\n            ...formState,\n            // propiedades computadas de los objetos se colocan en llaves [] asignando el valor que va a tomar\n            [ name ]: value\n        })\n    }\n\n    // // el primer argumento que recibe un callback que determina la función que se va a ejecutar cada vez que se llame\n    // // el segundo es un arreglo de dependencias, es la condición por la que se debe disparar\n    // // si esta vacio, se disparará una sola vez al montarse\n    // useEffect( () =>{\n    //     console.log('formState cambió');\n    // }, []);\n    \n    // // se recomienda hacer un useEffect por cada acción que se quiera llamar\n    // // si colocamos un argumento en el arreglo de dependencias se disparará el useEffect cada vez que esta propiedad cambie\n    // useEffect( () =>{\n    //     console.log('formState cambió');\n    // }, [formState]);\n\n    // useEffect( () =>{\n    //     console.log('email cambió');\n    // }, [email]);\n\n\n    //useEffect con snippet\n    //tiene el callback con el cuerpo y en el retorno se maneja la limpiaza en caso de tener un observable o un listener\n    // useEffect(() => {\n    //     //acá se puede crear el observable o listener\n    //   first\n    \n    //   //acá lo limpiamos para evitar que siga consumiendo memoria\n    //   return () => {\n    //     second\n    //   }\n    //   //arreglo de dependencias\n    // }, [third])\n    \n\n  return (\n   <>\n    <h1> Formulario con Custom Hook </h1>\n    <hr />\n\n    <input \n        type='text'\n        className='form-control mt-2'\n        placeholder='Username'\n        name= 'username'\n        value={username}\n        onChange = { onInputChange }\n    />\n    <input \n        type='email'\n        className='form-control mt-2'\n        placeholder='carolina@mail.com'\n        name='email'\n        value={email}\n        onChange= { onInputChange }\n    />\n    <input \n        type='password'\n        className='form-control mt-2'\n        placeholder='password'\n        name='password'\n        value={password}\n        onChange= { onInputChange }\n    />\n   </>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,WAAxB;;;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;EAAA;;EAEhC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC;IACvCK,QAAQ,EAAE,EAD6B;IAEvCC,KAAK,EAAE,EAFgC;IAGvCC,QAAQ,EAAE;EAH6B,CAAD,CAA1C;EAMA,MAAM;IAACF,QAAD;IAAWC,KAAX;IAAkBC;EAAlB,IAA8BJ,SAApC;;EAGA,MAAMK,aAAa,GAAG,QAAa;IAAA,IAAZ;MAACC;IAAD,CAAY;IAC/B,MAAM;MAACC,IAAD;MAAOC;IAAP,IAAgBF,MAAtB;IACAL,YAAY,CAAC,EACT,GAAGD,SADM;MAET;MACA,CAAEO,IAAF,GAAUC;IAHD,CAAD,CAAZ;EAKH,CAPD,CAXgC,CAoBhC;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;;;EAGF,oBACC;IAAA,wBACC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,eAEC;MAAA;MAAA;MAAA;IAAA,QAFD,eAIC;MACI,IAAI,EAAC,MADT;MAEI,SAAS,EAAC,mBAFd;MAGI,WAAW,EAAC,UAHhB;MAII,IAAI,EAAE,UAJV;MAKI,KAAK,EAAEN,QALX;MAMI,QAAQ,EAAKG;IANjB;MAAA;MAAA;MAAA;IAAA,QAJD,eAYC;MACI,IAAI,EAAC,OADT;MAEI,SAAS,EAAC,mBAFd;MAGI,WAAW,EAAC,mBAHhB;MAII,IAAI,EAAC,OAJT;MAKI,KAAK,EAAEF,KALX;MAMI,QAAQ,EAAIE;IANhB;MAAA;MAAA;MAAA;IAAA,QAZD,eAoBC;MACI,IAAI,EAAC,UADT;MAEI,SAAS,EAAC,mBAFd;MAGI,WAAW,EAAC,UAHhB;MAII,IAAI,EAAC,UAJT;MAKI,KAAK,EAAED,QALX;MAMI,QAAQ,EAAIC;IANhB;MAAA;MAAA;MAAA;IAAA,QApBD;EAAA,gBADD;AA+BD,CAnFM;;GAAMN,c;;KAAAA,c"},"metadata":{},"sourceType":"module"}