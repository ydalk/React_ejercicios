{"ast":null,"code":"var _jsxFileName = \"/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/09useContext/context/UserProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { UserContext } from \"./UserContext\"; //cualquier componente podra usar o consumir la inforamcion que pase en el value\n// const user = {\n//     id: 123,\n//     name: 'Carolina Porras',\n//     email: 'caro@gmailcom'\n// }\n//tienen en las props los children\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState();\n  return (\n    /*#__PURE__*/\n    // .Provider permite proveer toda la informaci贸n que el Context va a proveerle al arbol de componentes\n    // el value es la informaci贸n que cualquier hijo del userProvider va a poder acceder del contexto\n    _jsxDEV(UserContext.Provider, {\n      value: {\n        user,\n        setUser\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(UserProvider, \"o9IDUnktVQDaISs7uNAxhhOcBT4=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["useState","UserContext","UserProvider","children","user","setUser"],"sources":["/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/09useContext/context/UserProvider.jsx"],"sourcesContent":["import { useState } from \"react\"\nimport { UserContext } from \"./UserContext\"\n\n//cualquier componente podra usar o consumir la inforamcion que pase en el value\n// const user = {\n//     id: 123,\n//     name: 'Carolina Porras',\n//     email: 'caro@gmailcom'\n// }\n\n//tienen en las props los children\nexport const UserProvider = ({ children }) => {\n    \n    const [ user, setUser] = useState();\n\n\n  return (\n    \n// .Provider permite proveer toda la informaci贸n que el Context va a proveerle al arbol de componentes\n// el value es la informaci贸n que cualquier hijo del userProvider va a poder acceder del contexto\n    <UserContext.Provider  value= {{user, setUser}}>\n        {children}\n    </UserContext.Provider>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAE1C,MAAM,CAAEC,IAAF,EAAQC,OAAR,IAAmBL,QAAQ,EAAjC;EAGF;IAAA;IAEF;IACA;IACI,QAAC,WAAD,CAAa,QAAb;MAAuB,KAAK,EAAG;QAACI,IAAD;QAAOC;MAAP,CAA/B;MAAA,UACKF;IADL;MAAA;MAAA;MAAA;IAAA;EAJF;AAQD,CAbM;;GAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}