{"ast":null,"code":"var _jsxFileName = \"/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/06memos/MemoHook.jsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo, useState } from 'react';\nimport { useCounter } from '../hooks'; //si no quiero que una función se reprocese y no se vuelva asignar en memoria se crea fuera del componente\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst heavyStuff = function () {\n  let iterationNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n\n  for (let i = 0; i < iterationNumber; i++) {\n    console.log('Ahí vamos...');\n  }\n\n  return `${iterationNumber} iteraciones realizadas`;\n};\n\nexport const MemoHook = () => {\n  _s();\n\n  const {\n    counter,\n    increment\n  } = useCounter();\n  const [show, setShow] = useState(true); //memoriza un valor (primer argumento), la dependecia es el valor en función del cual se va a renderizar\n\n  const valorMemorizado = useMemo(() => heavyStuff(counter), [counter]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Counter: \", /*#__PURE__*/_jsxDEV(\"small\", {\n        children: counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" \", valorMemorizado, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => {\n        increment();\n      },\n      children: \" + 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-outline-primary\" // de esta forma alterno el valor del booleano al hacer click\n      ,\n      onClick: () => {\n        setShow(!show);\n      } //se pasa por stringify ya que al ser un valor booleano no lo puedo mostrar\n      ,\n      children: [\" hide/show \", JSON.stringify(show)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MemoHook, \"5rkmO82QfFaxImShRpZ1otXp63A=\", false, function () {\n  return [useCounter];\n});\n\n_c = MemoHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoHook\");","map":{"version":3,"names":["useMemo","useState","useCounter","heavyStuff","iterationNumber","i","console","log","MemoHook","counter","increment","show","setShow","valorMemorizado","JSON","stringify"],"sources":["/home/carolina/Documents/doc_caro/Udemy/React-ejercicios/hookapp/src/06memos/MemoHook.jsx"],"sourcesContent":["import { useMemo, useState } from 'react'\nimport {useCounter} from '../hooks'\n\n//si no quiero que una función se reprocese y no se vuelva asignar en memoria se crea fuera del componente\nconst heavyStuff = ( iterationNumber = 100)=>{\n  for (let i = 0; i < iterationNumber; i++) {\n    console.log('Ahí vamos...');\n    \n  }\n  return `${ iterationNumber} iteraciones realizadas`;\n}\n\n\n\n\nexport const MemoHook = () => {\n\n    const {counter, increment} = useCounter()\n    const [show, setShow] = useState(true)\n\n    //memoriza un valor (primer argumento), la dependecia es el valor en función del cual se va a renderizar\n    const valorMemorizado = useMemo(() => heavyStuff(counter), [counter])\n\n  return (\n    <>\n        <h1>Counter: <small>{counter}</small></h1>\n        <hr />\n\n        <h4> { valorMemorizado } </h4>\n\n        <button \n            className='btn btn-primary'\n            onClick={()=>{increment()}}\n        > + 1 \n        </button>\n\n        <button \n            className='btn btn-outline-primary'\n            // de esta forma alterno el valor del booleano al hacer click\n            onClick={()=>{setShow( !show )}}\n            //se pasa por stringify ya que al ser un valor booleano no lo puedo mostrar\n        > hide/show { JSON.stringify(show)}\n        </button>\n\n    </>\n  )\n}\n\n"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,SAAQC,UAAR,QAAyB,UAAzB,C,CAEA;;;;;AACA,MAAMC,UAAU,GAAG,YAA0B;EAAA,IAAxBC,eAAwB,uEAAN,GAAM;;EAC3C,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAApB,EAAqCC,CAAC,EAAtC,EAA0C;IACxCC,OAAO,CAACC,GAAR,CAAY,cAAZ;EAED;;EACD,OAAQ,GAAGH,eAAgB,yBAA3B;AACD,CAND;;AAWA,OAAO,MAAMI,QAAQ,GAAG,MAAM;EAAA;;EAE1B,MAAM;IAACC,OAAD;IAAUC;EAAV,IAAuBR,UAAU,EAAvC;EACA,MAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC,CAH0B,CAK1B;;EACA,MAAMY,eAAe,GAAGb,OAAO,CAAC,MAAMG,UAAU,CAACM,OAAD,CAAjB,EAA4B,CAACA,OAAD,CAA5B,CAA/B;EAEF,oBACE;IAAA,wBACI;MAAA,qCAAa;QAAA,UAAQA;MAAR;QAAA;QAAA;QAAA;MAAA,QAAb;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA;MAAA;MAAA;IAAA,QAFJ,eAII;MAAA,gBAAOI,eAAP;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ,eAMI;MACI,SAAS,EAAC,iBADd;MAEI,OAAO,EAAE,MAAI;QAACH,SAAS;MAAG,CAF9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANJ,eAYI;MACI,SAAS,EAAC,yBADd,CAEI;MAFJ;MAGI,OAAO,EAAE,MAAI;QAACE,OAAO,CAAE,CAACD,IAAH,CAAP;MAAiB,CAHnC,CAII;MAJJ;MAAA,0BAKcG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CALd;IAAA;MAAA;MAAA;MAAA;IAAA,QAZJ;EAAA,gBADF;AAuBD,CA/BM;;GAAMH,Q;UAEoBN,U;;;KAFpBM,Q"},"metadata":{},"sourceType":"module"}